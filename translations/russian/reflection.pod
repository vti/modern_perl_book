=head1 Рефлексия

Z<reflection>

X<reflection>
X<introspection>

I<Рефлексия> (или I<интроспекция>) это процесс опрашивания програмы о самой себе
в процессе выполнения. Обращаясь с кодом как с данными, можно управлять кодом
таким же способом каким вы управляете данными. Этот принцип лежит в основе
генерации кода (L<code_generation>).

X<CPAN; C<Class::MOP>>

C<Class::MOP> (L<class_mop>) из Moose упрощает многие задачи рефлексии для
объектных моделей. Если вы используете Moose, система метапрограммирования
поможет вам. Если нет, несколько других встроенных в Perl 5 идиом могут
позволить инспектировать и управлять работающими программами.

=head2 Проверка, что модуль был загружен

X<C<%INC>>

Если вам известно имя модуля, вы можете проверить, что Perl думает, что он
загрузил этот модуль, посмотрев на хеш C<%INC>. Когда Perl 5 загружает код
с помощью C<use> или C<require>, он сохраняет запись в C<%INC>, где ключом
является файл загруженого модуля, а значением полный путь на диске. Другими
словами, загрузка C<Modern::Perl> делает примерно следующее:

=begin programlisting

    $INC{'Modern/Perl.pm'} =
        '.../lib/site_perl/5.12.1/Modern/Perl.pm';

=end programlisting

Детали пути могут отличаться в зависимости от вашей инсталляции. Для проверки,
что Perl успешно загрузил модуль, необходимо преобразовать имя модуля
в каноническую файловую форму и проверить что такой ключ существует в C<%INC>:

=begin programlisting

    sub module_loaded
    {
        (my $modname = shift) =~ s!::!/!g;
        return exists $INC{ $modname . '.pm' };
    }

=end programlisting

X<C<@INC>>
X<CPAN; C<Test::MockObject>>
X<CPAN; C<Test::MockModule>>

Также как и с C<@INC>, любой код может модифицировать C<%INC>. Некоторые модули
(такие как C<Test::MockObject> или C<Test::MockModule>) модифицирут C<%INC> по
необходимым причинам. В зависимости от вашей паранойи, вы можете проверить путь
и ожидаемое содержимое пакета самостоятельно.

X<CPAN; C<Class::Load>>

Фукнция C<is_class_loaded()> CPAN модуля C<Class::Load> инкапсулирует эту
проверку C<%INC>.

=head2 Проверка, что пакет существует

Чтобы проверить где-то в вашей программе, что пакет существует -- если какой-то
код выполнил директиву C<package> с нужным именем -- проверьте, что пакет
наследует C<UNIVERSAL>. Все, что наследует C<UNIVERSAL> должно каким-то образом
реализовывать метод C<can>. Если такого пакета не существует, Perl бросит
исключение о некорректном инвоканте, поэтому оберните этот вызов в блок C<eval>:

=begin programlisting

    say "$pkg существует" if eval { $pkg->can( 'can' ) };

=end programlisting

Альтернативным подходом является продирание через символьную таблицу Perl.

=head2 Проверка, что класс существует

Так как в Perl 5 нет большой разницы между пакетами и классами, лучшее что вы
можете сделать без Moose, это проверить, что пакет с соответствующим именем,
существует. Вы I<можете> проверить с помощью C<can()>, что в пакете есть
C<new()>, но нет гарантированного способа определить, что любой найденный
C<new()> это метод или конструктор.

=head2 Проверка версии модуля

Модули не обязаны иметь версии, но каждый пакет наследует C<VERSION()> метод от
универсального родительского класса C<UNIVERSAL> (L<universal>):

=begin programlisting

    my $mod_ver = $module->VERSION();

=end programlisting

C<VERSION()> возвращает версию данного модуля, если такая определена. Иначе
возвращается C<undef>. Если модуль не существует, метод скорее всего вернет
C<undef>.

=head2 Проверка, что функция существует

Чтобы проверить, что в пакете существует функция, вызовите C<can()> как метод
класса на имени пакета:

=begin programlisting

    say "$func() существует" if $pkg->can( $func );

=end programlisting

Perl бросит исключение если только C<$pkg> не корректный инвокант; если есть
какие-то сомнения по поводу корректности пакета, оборачивайте вызов в блок
C<eval>. Остерегайтесь ситуации когда функция, определенная через C<AUTOLOAD()>
(L<autoload>), может давать неверный ответ, если ее пакет не объявил эту функцию
или неправильно переопределил C<can()>. Это естественно ошибка в пакете.

Используйте следующий способ, чтобы определить импортировал ли модуль с помощью
C<import()> функцию в текущее пространство имен.

=begin programlisting

    say "$func() импортирована!" if __PACKAGE__->can( $func );

=end programlisting

По поводу определения существования пакета, вы I<можете> поискать в символьной
таблице, если у вас, конечно, есть терпение.

=head2 Проверка, что метод существует

Не существует надежного способа отличить функцию от метода.

=head2 Поиск по символьной таблице

X<symbol tables>
X<typeglobs>

В Perl 5 символьная таблица это специальный хеш, где ключами являются имена
глобальных символов пакета, а значениями -- typeglob. I<typeglob> это внутренная
структура данных, которая содержит любой или каждый из типов: скаляр, массив,
хеш, дескриптор файла или функцию.

Для доступа к символьной таблице, добавьте двойное двоеточие к имени пакета.
Например, символьная таблица для пакета C<MonkeyGrinder> доступна как
C<%MonkeyGrinder::>.

Вы I<можете> проверить существование специальных символьных имен внутри
символьной таблицы оператором C<exists> (или манипулировать символьной таблицей
I<добавляя> или I<удаляя> символы, если угодно). Но следует помнить, что
некоторые изменения в ядре Perl 5 затронули детали того, что хранят typeglobs,
когда и почему.

X<CPAN; C<Package::Stash>>

Смотрите секцию "Symbol Tables" в C<perldoc perlmod> для более детального
ознакомления, затем выберите другие способы рефлексии из данной секции. Если вам
обязательно нужно манипулировать символьной таблицей и typeglobs, подумайте об
использовании CPAN модуля C<Package::Stash>.
