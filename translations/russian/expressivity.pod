=encoding utf8

=head1 Выразительность

Z<expressivity>

X<Уолл, Ларри>
X<Ларри Уолл>

Изучение Ларри Уоллом лингвистики и языков человечества, повлияло на дизайн
Perl. Язык даёт вам потрясающую свободу для решения ваших задач, в зависимости
от стиля программирования в вашей группе, доступного времени, ожидаемого
времени жизни программы или даже от того, как креативно вы мыслите. Вы можете
создавать простой, прямолинейный код, или интегрироваться в большую, хорошо
спроектированную программу. Вы можете выбрать любую из парадигм стиля и можете
избегать или наоборот активно применять продвинутые возможности.

В то время как другие языки принуждают использовать один лучший способ для
написания любого кода, Perl позволяет I<вам> решать что будет более читаемым,
или полезным, или забавным.

X<TIMTOWTDI>
X<Tim Toady>

Perl-хакеры придумали слоган для этого: I<TIMTOWTDI>, произноситься как "Tim
Toady" (Тим-Подхалим) или "There's more than one way to do it!" (I<Есть больше
одного способа сделать это!> -- прим. перев.).

Хотя подобная выразительность позволяет мастерам дела создавать удивительные
программы, она же позволяет неразумным или неосторожным "наломать дров". Опыт и
хороший вкус станут вашими проводниками в создании превосходного кода. Выбор за
вами -- но следите за удобочитаемостью и возможностью дальнейшего сопровождения,
особенно для тех, кто придёт после вас.

Часто для новичков в Perl некоторые конструкции непонятны. Но многие из подобных
идиом (L<idioms>) (при достаточной сноровке) являются очень мощными. Можно
вполне обходиться и без них, пока вы не почувствуете всё их удобство.

Изучение Perl -- как изучение нового разговорного языка. Вы выучите несколько
слов, свяжете вместе предложения и вскоре будете наслаждаться простой беседой.
Мастерство приходит с практикой чтения и письма. Вам не обязательно понимать
каждую деталь Perl, чтобы быть продуктивным, но принципы из этой главы жизненно
необходимы для вашего роста как программиста.

В качестве ещё одной поставленной цели, Perl старается не создавать сюрпризов
для опытных (Perl) программистов. Например, сложение двух переменных
(C<$first_num + $second_num>) это явно численная операция
(L<numeric_operators>); оператор сложения должен рассматривать оба аргумента как
числовые значения, чтобы получить числовой результат. Независимо от
содержимого C<$first_num> и C<$second_num>, Perl приведёт их к числовым
значениям (L<numeric_coercion>). Вы выразили своё намерение считать их числами,
использовав числовой оператор. И Perl успешно выполнил это.

X<DWIM>
X<принцип наименьшего изумления>

Адепты Perl часто называют это принципом I<DWIM>, или I<Do What I Mean> (I<Делай
то, что я подразумеваю> -- прим. перев.). Другими словами, Perl следует
I<приципу наименьшего изумления>. Бегло ознакомившись с Perl (особенно
с контекстом; L<context_philosophy>), становится возможным понять смысл
незнакомого выражения в Perl. Вы разработаете этот навык.

X<baby Perl>

Выразительность Perl также позволяет новичкам писать полезные программы вообще
ничего не понимая. Получаемый код часто называют I<baby Perl> (I<детский Perl>
-- прим. перев.), в том смысле, что почти все пытаются помочь детям научиться
говорить правильно. Все начинают новичками. Через практику и советы от более
опытных программистов, вы понимаете и перенимаете всё больше мощных идиом
и техник.

Например, опытный Perl-хакер перемножит все числа в списке так:

=begin programlisting

    my @tripled = map { $_ * 3 } @numbers;

=end programlisting

... знаток Perl может написать:

=begin programlisting

    my @tripled;

    for my $num (@numbers)
    {
        push @tripled, $num * 3;
    }

=end programlisting

... тогда как новичок может попытаться:

=begin programlisting

    my @tripled;

    for (my $i = 0; $i < scalar @numbers; $i++)
    {
        $tripled[$i] = $numbers[$i] * 3;
    }

=end programlisting

Все три подхода делают то же самое, но каждый применяет Perl по-разному.

Опыт написания на Perl поможет вам фокусироваться над тем, I<что> вы хотите
сделать, чем над тем I<как> это сделать. Так или иначе, Perl с радостью выполнит
и простые программы. Вы можете проектировать и совершенствовать ваши программы
для ясности, выразительности, повторного использования, сопровождаемости, по
частям или в целом. Воспользуйтесь предлагаемой вам гибкостью и прагматизмом:
гораздо лучше выполнить вашу задачу эффективно сейчас, чем написать
концептуально безупречную и прекрасную программу в следующем году.
